#Hi, to understand what's happening in this code, check out my repository on linear regression, where everything is explained in detail.
#  Here, I'm doing the same process but manually.

def mean_value(values):

    total_sum =sum(values)

    count =len(values)

    mean_value = total_sum / count

    return (mean_value)


def simple_convairance(x , y , mean_x , mean_y):

    convairance = 0.0

    for i in range(len(x)):

        convairance = convairance + ((x[i] - mean_x) * (y[i] - mean_y))
    
    return (convairance)


def simple_variance (x ,mean_x):

    variance = 0.0

    for x_value in x :

        variance = variance + ((x_value - mean_x) ** 2)
    
    return (variance)


def calculate_cofficients(x , y):

    mean_x = mean_value(x)

    mean_y = mean_value(y)


    convairance_value = simple_convairance(x , y , mean_x , mean_y)

    variance_value = simple_variance(x , mean_x)

    b1 = convairance_value / variance_value

    b0 = mean_y - (b1 * mean_x)

    return (b0 , b1)


def simple_linear_regression(x , y , x_test):
    b0 , b1 = calculate_cofficients(x , y)
    predict = []
    for values in x_test:
        predicted_value = b0 + (b1 * values)
        predict.append(predicted_value)

    return (predict)


build_area =[130,130,130,130,130,130,130,130,130,130,
    130,130,130,130,130,130,130,130,130,130,

  130,130,130,130,130,140,140,140,140,140,
  140,140,140,140,140,140,140,140,140,140,

  140,140,140,140,140,150,150,150,150,150,
  150,150,150,150,150,150,150,150,150,150,
 
  150,150,150,150,150,160,160,160,160,160,
  160,160,160,160,160,160,160,160,160,160,
  
  160,160,160,160,160,160,160,160,160,160,
  160,160,160,160,160,160,160,160,160,160,
  
  170,170,170,170,170,170,170,170,170,170,
  170,170,170,170,170,170,170,170,170,170,
  
  170,170,170,170,170,180,180,180,180,180,
  180,180,180,180,180,180,180,180,180,180,
  
  180,180,180,180,180,180,180,180,180,180,
  190,190,190,190,190,190,190,190,190,190,
  
  190,190,190,190,190,190,190,190,190,190,
  190,190,190,190,190,200,200,200,200,200,
  
  200,200,200,200,200,200,200,200,200,200,
  200,200,200,200,200,200,200,200,200,200,
  
  210,210,210,210,210,210,210,210,210,210,
  210,210,210,210,210,210,210,210,210,210,
  
  210,210,210,210,210,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  
  220,220,220,220,220,220,220,220,220,220,
  230,230,230,230,230,230,230,230,230,230,
  
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,240,240,240,240,240,
  
  240,240,240,240,240,240,240,240,240,240,
  240,240,240,240,240,240,240,240,240,240,
  
  250,250,250,250,250,250,250,250,250,250,
  250,250,250,250,250,250,250,250,250,250,
  
  250,250,250,250,250,260,260,260,260,260,
  260,260,260,260,260,260,260,260,260,260,
  
  260,260,260,260,260,260,260,260,260,260,
  270,270,270,270,270,270,270,270,270,270,
  
  270,270,270,270,270,270,270,270,270,270,
  270,270,270,270,270,280,280,280,280,280,
  
  280,280,280,280,280,280,280,280,280,280,
  280,280,280,280,280,280,280,280,280,280,]


build_price = [207000,212000,217000,222000,227000,209000,214000,219000,224000,229000,
  211000,216000,221000,226000,231000,213000,218000,223000,228000,233000,

  215000,220000,225000,230000,235000,222000,227000,232000,237000,242000,
  224000,229000,234000,239000,244000,226000,231000,236000,241000,246000,

  228000,233000,238000,243000,248000,230000,235000,240000,245000,250000,
  237000,242000,247000,252000,257000,239000,244000,249000,254000,259000,

  241000,246000,251000,256000,261000,243000,248000,253000,258000,263000,
  245000,250000,255000,260000,265000,252000,257000,262000,267000,272000,

  254000,259000,264000,269000,274000,256000,261000,266000,271000,276000,
  258000,263000,268000,273000,278000,260000,265000,270000,275000,280000,

  267000,272000,277000,282000,287000,269000,274000,279000,284000,289000,
  271000,276000,281000,286000,291000,273000,278000,283000,288000,293000,

  275000,280000,285000,290000,295000,282000,287000,292000,297000,302000,
  284000,289000,294000,299000,304000,286000,291000,296000,301000,306000,

  288000,293000,298000,303000,308000,290000,295000,300000,305000,310000,
  297000,302000,307000,312000,317000,299000,304000,309000,314000,319000,

  301000,306000,311000,316000,321000,303000,308000,313000,318000,323000,
  305000,310000,315000,320000,325000,312000,317000,322000,327000,332000,

  314000,319000,324000,329000,334000,316000,321000,326000,331000,336000,
  318000,323000,328000,333000,338000,320000,325000,330000,335000,340000,

  327000,332000,337000,342000,347000,329000,334000,339000,344000,349000,
  331000,336000,341000,346000,351000,333000,338000,343000,348000,353000,

  335000,340000,345000,350000,355000,342000,347000,352000,357000,362000,
  344000,349000,354000,359000,364000,346000,351000,356000,361000,366000,

  348000,353000,358000,363000,368000,350000,355000,360000,365000,370000,
  357000,362000,367000,372000,377000,359000,364000,369000,374000,379000,

  361000,366000,371000,376000,381000,363000,368000,373000,378000,383000,
  365000,370000,375000,380000,385000,372000,377000,382000,387000,392000,

  374000,379000,384000,389000,394000,376000,381000,386000,391000,396000,
  378000,383000,388000,393000,398000,380000,385000,390000,395000,400000,

  387000,392000,397000,402000,407000,389000,394000,399000,404000,409000,
  391000,396000,401000,406000,411000,393000,398000,403000,408000,413000,

  395000,400000,405000,410000,415000,402000,407000,412000,417000,422000,
  404000,409000,414000,419000,424000,406000,411000,416000,421000,426000,

  408000,413000,418000,423000,428000,410000,415000,420000,425000,430000,
  417000,422000,427000,432000,437000,419000,424000,429000,434000,439000,

  421000,426000,431000,436000,441000,423000,428000,433000,438000,443000,
  425000,430000,435000,440000,445000,432000,437000,442000,447000,452000,

  434000,439000,444000,449000,454000,436000,441000,446000,451000,456000,
  438000,443000,448000,453000,458000,440000,445000,450000,455000,460000,]


build_area_test = [  290,290,290,290,290,290,290,290,290,290,
  290,290,290,290,290,290,290,290,290,290,
  
  290,290,290,290,290,300,300,300,300,300,
  300,300,300,300,300,300,300,300,300,300,
  
  300,300,300,300,300,300,300,300,300,300,
  310,310,310,310,310,310,310,310,310,310,
  
  310,310,310,310,310,310,310,310,310,310,
  310,310,310,310,310,320,320,320,320,320,
  
  320,320,320,320,320,320,320,320,320,320,
  320,320,320,320,320,320,320,320,320,320]


build_price_test = [  447000,452000,457000,462000,467000,449000,454000,459000,464000,469000,
  451000,456000,461000,466000,471000,453000,458000,463000,468000,473000,

  455000,460000,465000,470000,475000,462000,467000,472000,477000,482000,
  464000,469000,474000,479000,484000,466000,471000,476000,481000,486000,

  468000,473000,478000,483000,488000,470000,475000,480000,485000,490000,
  477000,482000,487000,492000,497000,479000,484000,489000,494000,499000,

  481000,486000,491000,496000,501000,483000,488000,493000,498000,503000,
  485000,490000,495000,500000,505000,492000,497000,502000,507000,512000,

  494000,499000,504000,509000,514000,496000,501000,506000,511000,516000,
  498000,503000,508000,513000,518000,500000,505000,510000,515000,520000]



print("Provide detailed information about the building, keeping in mind that the building will be considered as located in Abdoun, Amman, Jordan..")
area_input = [int(input("Add the size of the building in m^2: "))]

y_pred = simple_linear_regression(build_area , build_price , area_input)

y_pred_int = int(y_pred[0])

y_pred_number = f"{y_pred_int:,}"

print("The expected price in JD is :",y_pred_number,"JD")

build_price_predicted = simple_linear_regression(build_area , build_price , build_area_test)



#calculate the mean squared error

def mse_calc(build_price_test , build_price_predicted):

    mse_array = []

    for index in range (len(build_price_test)):

        error = (build_price_test[index] - build_price_predicted[index]) ** 2

        mse_array.append(error)

    mse = mean_value(mse_array)

    return(mse)


print("The mean Squared Error is: ", mse_calc(build_price_test , build_price_predicted))


def r2_calc(build_price_test , build_price_predicted):

    rss = 0.0

    tss = 0.0

    for index in range (len(build_price_test)):

        rss += (build_price_test[index] - build_price_predicted[index]) ** 2

        tss += (build_price_test[index] - mean_value(build_price_test)) ** 2

    if tss == 0 :
        r2_score = 1.0

    else :

        r2_score = 1 - (rss / tss)

    return (r2_score)

print("The R^2 Score is: ", r2_calc(build_price_test , build_price_predicted))


def mae_calc (build_price_test, build_price_predicted):

    mae_array = []

    for index in range (len(build_price_test)):

        error = abs(build_price_test[index] - build_price_predicted[index])

        mae_array.append(error)

    mae = mean_value(mae_array)
    
    return(mae)

print("The Mean Absolute Error is: ", mae_calc(build_price_test , build_price_predicted))